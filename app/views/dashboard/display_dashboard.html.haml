%div.row
  %div.col-md-4
    %label{ for: :r1c1_id }
      %h3
        Gauge chart 1
      %object{ id: :r1c1_id }
  %div.col-md-4
    %label{ for: :r1c2_id }
      %h3
        Gauge chart 2
      %object{ id: :r1c2_id }
  %div.col-md-4
    %label{ for: :r1c3_id }
      %h3
        Gauge chart 3
      %object{ id: :r1c3_id }
%div.row
  %div.col-md-4
    %label{ for: :r2c1_id }
      %h3
        Gauge chart 4
      %object{ id: :r2c1_id }
  %div.col-md-4
    %label{ for: :r2c2_id }
      %h3
        Gauge chart 5
      %object{ id: :r2c2_id }


:javascript

  var chart_list = [ undefined ];

  var chart_r1c1 = c3.generate({
    bindto: '#r1c1_id',
    size: {
      height: 200,
      width: 320
    },
    data: {
      columns: [
          ['data', 0.0]
      ],
      type: 'gauge',
      onclick: function (d, i) { console.log("onclick", d, i); },
      onmouseover: function (d, i) { console.log("onmouseover", d, i); },
      onmouseout: function (d, i) { console.log("onmouseout", d, i); }
    },
    gauge: {
  //        label: {
  //            format: function(value, ratio) {
  //                return value;
  //            },
  //            show: false // to turn off the min/max labels.
  //        },
  //    min: 0, // 0 is default, //can handle negative min e.g. vacuum / voltage / current flow / rate of change
  //    max: 100, // 100 is default
  //    units: ' %',
  //    width: 39 // for adjusting arc thickness
    },
    color: {
      pattern: ['#60B044',  '#F6C600', '#FF2020'], // the color levels for the percentage values.
      threshold: {
  //            unit: 'value', // percentage is default
  //            max: 200, // 100 is default
          values: [80, 90, 100]
      }
  }
  });
  chart_list.push(chart_r1c1);

  var chart_r1c2 = c3.generate({
    bindto: '#r1c2_id',
    size: {
      height: 200,
      width: 320
      },
    data: {
        columns: [
            ['data', 0.0]
        ],
        type: 'gauge',
        onclick: function (d, i) { console.log("onclick", d, i); },
        onmouseover: function (d, i) { console.log("onmouseover", d, i); },
        onmouseout: function (d, i) { console.log("onmouseout", d, i); }
    },
    gauge: {
  //        label: {
  //            format: function(value, ratio) {
  //                return value;
  //            },
  //            show: false // to turn off the min/max labels.
  //        },
  //    min: 0, // 0 is default, //can handle negative min e.g. vacuum / voltage / current flow / rate of change
  //    max: 100, // 100 is default
  //    units: ' %',
  //    width: 39 // for adjusting arc thickness
    },
    color: {
        pattern: ['#60B044',  '#F6C600', '#FF2020'], // the color levels for the percentage values.
        threshold: {
  //            unit: 'value', // percentage is default
  //            max: 200, // 100 is default
            values: [80, 90, 100]
        }
    }
  });
  chart_list.push(chart_r1c2);

  var chart_r1c3 = c3.generate({
    bindto: '#r1c3_id',
    size: {
      height: 200,
      width: 320
      },
    data: {
        columns: [
            ['data', 0.0]
        ],
        type: 'gauge',
        onclick: function (d, i) { console.log("onclick", d, i); },
        onmouseover: function (d, i) { console.log("onmouseover", d, i); },
        onmouseout: function (d, i) { console.log("onmouseout", d, i); }
    },
    gauge: {
  //        label: {
  //            format: function(value, ratio) {
  //                return value;
  //            },
  //            show: false // to turn off the min/max labels.
  //        },
  //    min: 0, // 0 is default, //can handle negative min e.g. vacuum / voltage / current flow / rate of change
  //    max: 100, // 100 is default
  //    units: ' %',
  //    width: 39 // for adjusting arc thickness
    },
    color: {
        pattern: ['#60B044',  '#F6C600', '#FF2020'], // the color levels for the percentage values.
        threshold: {
  //            unit: 'value', // percentage is default
  //            max: 200, // 100 is default
            values: [80, 90, 100]
        }
    }
  });
  chart_list.push(chart_r1c3);


  var chart_r2c1 = c3.generate({
    bindto: '#r2c1_id',
    size: {
      height: 200,
      width: 320
      },
    data: {
        columns: [
            ['data', 0.0]
        ],
        type: 'gauge',
        onclick: function (d, i) { console.log("onclick", d, i); },
        onmouseover: function (d, i) { console.log("onmouseover", d, i); },
        onmouseout: function (d, i) { console.log("onmouseout", d, i); }
    },
    gauge: {
  //        label: {
  //            format: function(value, ratio) {
  //                return value;
  //            },
  //            show: false // to turn off the min/max labels.
  //        },
  //    min: 0, // 0 is default, //can handle negative min e.g. vacuum / voltage / current flow / rate of change
  //    max: 100, // 100 is default
  //    units: ' %',
  //    width: 39 // for adjusting arc thickness
    },
    color: {
        pattern: ['#60B044',  '#F6C600', '#FF2020'], // the color levels for the percentage values.
        threshold: {
  //            unit: 'value', // percentage is default
  //            max: 200, // 100 is default
            values: [80, 90, 100]
        }
    }
  });
  chart_list.push(chart_r2c1);


  var chart_r2c2 = c3.generate({
    bindto: '#r2c2_id',
    size: {
      height: 200,
      width: 320
      },
    data: {
        columns: [
            ['data', 0.0]
        ],
        type: 'gauge',
        onclick: function (d, i) { console.log("onclick", d, i); },
        onmouseover: function (d, i) { console.log("onmouseover", d, i); },
        onmouseout: function (d, i) { console.log("onmouseout", d, i); }
    },
    gauge: {
  //        label: {
  //            format: function(value, ratio) {
  //                return value;
  //            },
  //            show: false // to turn off the min/max labels.
  //        },
  //    min: 0, // 0 is default, //can handle negative min e.g. vacuum / voltage / current flow / rate of change
  //    max: 100, // 100 is default
  //    units: ' %',
  //    width: 39 // for adjusting arc thickness
    },
    color: {
        pattern: ['#60B044',  '#F6C600', '#FF2020'], // the color levels for the percentage values.
        threshold: {
  //            unit: 'value', // percentage is default
  //            max: 200, // 100 is default
            values: [80, 90, 100]
        }
    }
  });
  chart_list.push(chart_r2c2);


  //
  // Let's animate one of the demos...
  //


  // Create a client instance (random client id)
  var client = new Paho.MQTT.Client("m13.cloudmqtt.com", 35797, "web_" + parseInt(Math.random() * 100, 10) );
  console.log("Got new item.");
  // set callback handlers
  client.onConnectionLost = onConnectionLost;
  client.onMessageArrived = onMessageArrived;
  var options = {
    useSSL: true,
    userName: "ttmprkzz",
    password: "5xwOtwTxUcop",
    onSuccess:onConnect,
    onFailure:doFail
  };

  // connect the client
  client.connect(options);
  console.log("connection made");

  // called when the client connects
  function onConnect() {
    // Once a connection has been made, make a subscription and send a message.
    console.log("onConnect");
    client.subscribe("test");
  }

  function doFail(e){
    console.log(e);
  };

  // called when the client loses its connection
  function onConnectionLost(responseObject) {
    if (responseObject.errorCode !== 0) {
      console.log("onConnectionLost:"+responseObject.errorMessage);
    }
  };

  // called when a message arrives
  function onMessageArrived(message) {
    console.log("onMessageArrived:"+message.payloadString);
    //alert("onMessageArrived:"+message.payloadString);
    var indexOfAChart =  parseInt(message.payloadString.split(/\s+/).reverse()[1] );
    var valueForChart = parseFloat(message.payloadString.split(/\s+/).reverse()[0] );
    //alert(indexOfAChart);
    //alert(valueForChart);
    chart_list[indexOfAChart].load( { columns: [['data', valueForChart ]] } );
    //chart_r1c2.load( { columns: [['data', valueForChart]] } );

  };
